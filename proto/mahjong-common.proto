syntax = "proto2";

package ydec.mahjong;

enum TileType {
  // 0x00 00 00 00 00 00 00 00
  //      G  F  E  D  C  B  A
  //
  // A: [1, 9] number of a tile. Or 0 means any.
  //
  // B: [1, 5] tile type. Or 0 means any.
  //
  // C: [1, 2] sequential or not. Or 0 means any.
  UNKNOWN_TILE = 0;

  MASK_TILE_NUMBER = 0xff;
  MASK_TILE_KIND = 0xff00;
  MASK_TILE_SEQUENTIAL = 0xff0000;

  WIND_TILE   = 0x0100;
  SANGEN_TILE = 0x0200;
  WANZU_TILE  = 0x0300;
  SOUZU_TILE  = 0x0400;
  PINZU_TILE  = 0x0500;

  JIHAI_TILE      = 0x010000;
  SEQUENTIAL_TILE = 0x020000;

  WIND_TON = 0x010101;
  WIND_NAN = 0x010102;
  WIND_SHA = 0x010103;
  WIND_PE  = 0x010104;

  SANGEN_HAKU  = 0x010201;
  SANGEN_HATSU = 0x010202;
  SANGEN_CHUN  = 0x010203;

  TILE_1 = 0x020001;
  TILE_2 = 0x020002;
  TILE_3 = 0x020003;
  TILE_4 = 0x020004;
  TILE_5 = 0x020005;
  TILE_6 = 0x020006;
  TILE_7 = 0x020007;
  TILE_8 = 0x020008;
  TILE_9 = 0x020009;

  WANZU_1 = 0x020301;
  WANZU_2 = 0x020302;
  WANZU_3 = 0x020303;
  WANZU_4 = 0x020304;
  WANZU_5 = 0x020305;
  WANZU_6 = 0x020306;
  WANZU_7 = 0x020307;
  WANZU_8 = 0x020308;
  WANZU_9 = 0x020309;

  SOUZU_1 = 0x020401;
  SOUZU_2 = 0x020402;
  SOUZU_3 = 0x020403;
  SOUZU_4 = 0x020404;
  SOUZU_5 = 0x020405;
  SOUZU_6 = 0x020406;
  SOUZU_7 = 0x020407;
  SOUZU_8 = 0x020408;
  SOUZU_9 = 0x020409;

  PINZU_1 = 0x020501;
  PINZU_2 = 0x020502;
  PINZU_3 = 0x020503;
  PINZU_4 = 0x020504;
  PINZU_5 = 0x020505;
  PINZU_6 = 0x020506;
  PINZU_7 = 0x020507;
  PINZU_8 = 0x020508;
  PINZU_9 = 0x020509;
}

message Tile {
  optional TileType type = 1;

  // Examples:
  //  RON_AGARI: is_tsumo = false, is_agari_hai = true
  optional bool is_tsumo = 2;
  optional bool is_agari_hai = 3;
}

enum HandElementType {
  UNKNOWN_HAND_ELEMENT_TYPE = 0;

  MENTSU = 0x1;
    SHUNTSU = 0x11;
    KOUTSU  = 0x12;
      KANTSU = 0x121;

  TOITSU = 0x2;

  IRREGULAR = 0x3;
}

message Element {
  optional HandElementType type = 1;
  repeated Tile tile = 2;
}

enum AgariType {
  UNKNOWN_AGARI_TYPE = 0;
  RON = 1;
  TSUMO = 2;
}

enum AgariState {
  UNKNOWN_AGARI_STATE = 0;
  SOKU = 1;
  HAITEI = 2;
  CHANKAN = 3;
  RINSHAN = 4;
  BEGINNING = 5;
}

message Agari {
  optional AgariType type = 1;
  repeated AgariState state = 2;
}

enum RichiType {
  UNKNOWN_RICHI_TYPE = 0;
  NONE = 1;
  RICHI = 2;
  OPENED_RICHI = 3;
  DOUBLE_RICHI = 4;
}

enum MachiType {
  // 0x00 00 00 00 00 00 00 00
  //      G  F  E  D  C  B  A
  //
  // A: type
  // B: 0: any, 1: 2fu, 2: 0fu

  UNKNOWN_MACHI_TYPE = 0;

  MASK_MACHI_KIND = 0xff;
  MASK_MACHI_FU = 0xff00;

  MACHI_2FU = 0x0100;
  MACHI_0FU = 0x0200;

  TANKI    = 0x0101;
  KANCHAN  = 0x0102;
  PENCHAN  = 0x0103;
  SHABO    = 0x0204;
  RYANMEN  = 0x0205;
}

enum PlayerType {
  UNKNOWN_PLAYER_TYPE = 0;
  DEALER = 1;
  NON_DEALER = 2;
}

message Hand {
  repeated TileType closed_tile = 1;  // not includes Agari-tile
  optional TileType agari_tile = 2;

  message Chii {
    repeated TileType tile = 1;
  }
  repeated Chii chiied_tile = 3;

  message Pon {
    optional TileType tile = 1;
  }
  repeated Pon ponned_tile = 4;

  message Kan {
    optional TileType tile = 1;
    optional bool is_closed = 2;
  }
  repeated Kan Kanned_tile = 5;

  optional Agari agari = 6;
  optional RichiType richi_type = 7;
}

message Player {
  optional PlayerType player_type = 1;
  optional TileType wind = 2;
  optional Hand hand = 3;
}

message Field {
  optional TileType wind = 1; // Ton-ba, Nan-ba
  repeated TileType dora = 2; // Not dora hyouji hai
  optional int32 honba = 3;
}
