// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mahjong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Hand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hand_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hand_Pon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hand_Pon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hand_Kan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hand_Kan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreCalculationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreCalculationResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TileType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mahjong_2eproto() {
  protobuf_AddDesc_mahjong_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mahjong.proto");
  GOOGLE_CHECK(file != NULL);
  Hand_descriptor_ = file->message_type(0);
  static const int Hand_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand, closed_tiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand, ponned_tiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand, kanned_tiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand, is_tsumo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand, is_reached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand, agari_tile_),
  };
  Hand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hand_descriptor_,
      Hand::default_instance_,
      Hand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hand));
  Hand_Pon_descriptor_ = Hand_descriptor_->nested_type(0);
  static const int Hand_Pon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand_Pon, tile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand_Pon, is_closed_),
  };
  Hand_Pon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hand_Pon_descriptor_,
      Hand_Pon::default_instance_,
      Hand_Pon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand_Pon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand_Pon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hand_Pon));
  Hand_Kan_descriptor_ = Hand_descriptor_->nested_type(1);
  static const int Hand_Kan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand_Kan, tile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand_Kan, is_closed_),
  };
  Hand_Kan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hand_Kan_descriptor_,
      Hand_Kan::default_instance_,
      Hand_Kan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand_Kan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hand_Kan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hand_Kan));
  Player_descriptor_ = file->message_type(1);
  static const int Player_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, my_wind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, my_hand_),
  };
  Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_descriptor_,
      Player::default_instance_,
      Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player));
  Field_descriptor_ = file->message_type(2);
  static const int Field_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, wind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, doras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, honba_),
  };
  Field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Field));
  ScoreCalculationResponse_descriptor_ = file->message_type(3);
  static const int ScoreCalculationResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreCalculationResponse, fu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreCalculationResponse, fan_),
  };
  ScoreCalculationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreCalculationResponse_descriptor_,
      ScoreCalculationResponse::default_instance_,
      ScoreCalculationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreCalculationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreCalculationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreCalculationResponse));
  TileType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mahjong_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hand_descriptor_, &Hand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hand_Pon_descriptor_, &Hand_Pon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hand_Kan_descriptor_, &Hand_Kan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_descriptor_, &Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreCalculationResponse_descriptor_, &ScoreCalculationResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mahjong_2eproto() {
  delete Hand::default_instance_;
  delete Hand_reflection_;
  delete Hand_Pon::default_instance_;
  delete Hand_Pon_reflection_;
  delete Hand_Kan::default_instance_;
  delete Hand_Kan_reflection_;
  delete Player::default_instance_;
  delete Player_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete ScoreCalculationResponse::default_instance_;
  delete ScoreCalculationResponse_reflection_;
}

void protobuf_AddDesc_mahjong_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmahjong.proto\"\224\002\n\004Hand\022\037\n\014closed_tiles"
    "\030\001 \003(\0162\t.TileType\022\037\n\014ponned_tiles\030\002 \003(\0132"
    "\t.Hand.Pon\022\037\n\014Kanned_tiles\030\003 \003(\0132\t.Hand."
    "Kan\022\020\n\010is_tsumo\030\004 \001(\010\022\022\n\nis_reached\030\005 \001("
    "\010\022\035\n\nagari_tile\030\006 \001(\0162\t.TileType\0321\n\003Pon\022"
    "\027\n\004tile\030\001 \001(\0162\t.TileType\022\021\n\tis_closed\030\002 "
    "\001(\010\0321\n\003Kan\022\027\n\004tile\030\001 \001(\0162\t.TileType\022\021\n\ti"
    "s_closed\030\002 \001(\010\"<\n\006Player\022\032\n\007my_wind\030\001 \001("
    "\0162\t.TileType\022\026\n\007my_hand\030\002 \001(\0132\005.Hand\"I\n\005"
    "Field\022\027\n\004wind\030\001 \001(\0162\t.TileType\022\030\n\005doras\030"
    "\002 \003(\0162\t.TileType\022\r\n\005honba\030\003 \001(\005\"3\n\030Score"
    "CalculationResponse\022\n\n\002fu\030\001 \001(\005\022\013\n\003fan\030\002"
    " \001(\005*\220\004\n\010TileType\022\013\n\007UNKNOWN\020\000\022\t\n\005WANZU\020"
    "\001\022\013\n\007WANZU_1\020\021\022\013\n\007WANZU_2\020\022\022\013\n\007WANZU_3\020\023"
    "\022\013\n\007WANZU_4\020\024\022\013\n\007WANZU_5\020\025\022\013\n\007WANZU_6\020\026\022"
    "\013\n\007WANZU_7\020\027\022\013\n\007WANZU_8\020\030\022\013\n\007WANZU_9\020\031\022\t"
    "\n\005SOUZU\020\002\022\013\n\007SOUZU_1\020!\022\013\n\007SOUZU_2\020\"\022\013\n\007S"
    "OUZU_3\020#\022\013\n\007SOUZU_4\020$\022\013\n\007SOUZU_5\020%\022\013\n\007SO"
    "UZU_6\020&\022\013\n\007SOUZU_7\020\'\022\013\n\007SOUZU_8\020(\022\013\n\007SOU"
    "ZU_9\020)\022\t\n\005PINZU\020\003\022\013\n\007PINZU_1\0201\022\013\n\007PINZU_"
    "2\0202\022\013\n\007PINZU_3\0203\022\013\n\007PINZU_4\0204\022\013\n\007PINZU_5"
    "\0205\022\013\n\007PINZU_6\0206\022\013\n\007PINZU_7\0207\022\013\n\007PINZU_8\020"
    "8\022\013\n\007PINZU_9\0209\022\010\n\004WIND\020\004\022\014\n\010WIND_TON\020A\022\014"
    "\n\010WIND_NAN\020B\022\014\n\010WIND_SHA\020C\022\013\n\007WIND_PE\020D\022"
    "\010\n\004YAKU\020\005\022\r\n\tYAKU_HAKU\020Q\022\016\n\nYAKU_HATSU\020R"
    "\022\r\n\tYAKU_CHUN\020S", 1015);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mahjong.proto", &protobuf_RegisterTypes);
  Hand::default_instance_ = new Hand();
  Hand_Pon::default_instance_ = new Hand_Pon();
  Hand_Kan::default_instance_ = new Hand_Kan();
  Player::default_instance_ = new Player();
  Field::default_instance_ = new Field();
  ScoreCalculationResponse::default_instance_ = new ScoreCalculationResponse();
  Hand::default_instance_->InitAsDefaultInstance();
  Hand_Pon::default_instance_->InitAsDefaultInstance();
  Hand_Kan::default_instance_->InitAsDefaultInstance();
  Player::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  ScoreCalculationResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mahjong_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mahjong_2eproto {
  StaticDescriptorInitializer_mahjong_2eproto() {
    protobuf_AddDesc_mahjong_2eproto();
  }
} static_descriptor_initializer_mahjong_2eproto_;
const ::google::protobuf::EnumDescriptor* TileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileType_descriptor_;
}
bool TileType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 65:
    case 66:
    case 67:
    case 68:
    case 81:
    case 82:
    case 83:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Hand_Pon::kTileFieldNumber;
const int Hand_Pon::kIsClosedFieldNumber;
#endif  // !_MSC_VER

Hand_Pon::Hand_Pon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hand_Pon::InitAsDefaultInstance() {
}

Hand_Pon::Hand_Pon(const Hand_Pon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hand_Pon::SharedCtor() {
  _cached_size_ = 0;
  tile_ = 0;
  is_closed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hand_Pon::~Hand_Pon() {
  SharedDtor();
}

void Hand_Pon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hand_Pon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hand_Pon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hand_Pon_descriptor_;
}

const Hand_Pon& Hand_Pon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

Hand_Pon* Hand_Pon::default_instance_ = NULL;

Hand_Pon* Hand_Pon::New() const {
  return new Hand_Pon;
}

void Hand_Pon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tile_ = 0;
    is_closed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hand_Pon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TileType tile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TileType_IsValid(value)) {
            set_tile(static_cast< ::TileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_closed;
        break;
      }

      // optional bool is_closed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_closed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_closed_)));
          set_has_is_closed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hand_Pon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TileType tile = 1;
  if (has_tile()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tile(), output);
  }

  // optional bool is_closed = 2;
  if (has_is_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_closed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hand_Pon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TileType tile = 1;
  if (has_tile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tile(), target);
  }

  // optional bool is_closed = 2;
  if (has_is_closed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_closed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hand_Pon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TileType tile = 1;
    if (has_tile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tile());
    }

    // optional bool is_closed = 2;
    if (has_is_closed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hand_Pon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hand_Pon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hand_Pon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hand_Pon::MergeFrom(const Hand_Pon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tile()) {
      set_tile(from.tile());
    }
    if (from.has_is_closed()) {
      set_is_closed(from.is_closed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hand_Pon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hand_Pon::CopyFrom(const Hand_Pon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hand_Pon::IsInitialized() const {

  return true;
}

void Hand_Pon::Swap(Hand_Pon* other) {
  if (other != this) {
    std::swap(tile_, other->tile_);
    std::swap(is_closed_, other->is_closed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hand_Pon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hand_Pon_descriptor_;
  metadata.reflection = Hand_Pon_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Hand_Kan::kTileFieldNumber;
const int Hand_Kan::kIsClosedFieldNumber;
#endif  // !_MSC_VER

Hand_Kan::Hand_Kan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hand_Kan::InitAsDefaultInstance() {
}

Hand_Kan::Hand_Kan(const Hand_Kan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hand_Kan::SharedCtor() {
  _cached_size_ = 0;
  tile_ = 0;
  is_closed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hand_Kan::~Hand_Kan() {
  SharedDtor();
}

void Hand_Kan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hand_Kan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hand_Kan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hand_Kan_descriptor_;
}

const Hand_Kan& Hand_Kan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

Hand_Kan* Hand_Kan::default_instance_ = NULL;

Hand_Kan* Hand_Kan::New() const {
  return new Hand_Kan;
}

void Hand_Kan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tile_ = 0;
    is_closed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hand_Kan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TileType tile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TileType_IsValid(value)) {
            set_tile(static_cast< ::TileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_closed;
        break;
      }

      // optional bool is_closed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_closed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_closed_)));
          set_has_is_closed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hand_Kan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TileType tile = 1;
  if (has_tile()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tile(), output);
  }

  // optional bool is_closed = 2;
  if (has_is_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_closed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hand_Kan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TileType tile = 1;
  if (has_tile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tile(), target);
  }

  // optional bool is_closed = 2;
  if (has_is_closed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_closed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hand_Kan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TileType tile = 1;
    if (has_tile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tile());
    }

    // optional bool is_closed = 2;
    if (has_is_closed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hand_Kan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hand_Kan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hand_Kan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hand_Kan::MergeFrom(const Hand_Kan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tile()) {
      set_tile(from.tile());
    }
    if (from.has_is_closed()) {
      set_is_closed(from.is_closed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hand_Kan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hand_Kan::CopyFrom(const Hand_Kan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hand_Kan::IsInitialized() const {

  return true;
}

void Hand_Kan::Swap(Hand_Kan* other) {
  if (other != this) {
    std::swap(tile_, other->tile_);
    std::swap(is_closed_, other->is_closed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hand_Kan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hand_Kan_descriptor_;
  metadata.reflection = Hand_Kan_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Hand::kClosedTilesFieldNumber;
const int Hand::kPonnedTilesFieldNumber;
const int Hand::kKannedTilesFieldNumber;
const int Hand::kIsTsumoFieldNumber;
const int Hand::kIsReachedFieldNumber;
const int Hand::kAgariTileFieldNumber;
#endif  // !_MSC_VER

Hand::Hand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hand::InitAsDefaultInstance() {
}

Hand::Hand(const Hand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hand::SharedCtor() {
  _cached_size_ = 0;
  is_tsumo_ = false;
  is_reached_ = false;
  agari_tile_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hand::~Hand() {
  SharedDtor();
}

void Hand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hand_descriptor_;
}

const Hand& Hand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

Hand* Hand::default_instance_ = NULL;

Hand* Hand::New() const {
  return new Hand;
}

void Hand::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    is_tsumo_ = false;
    is_reached_ = false;
    agari_tile_ = 0;
  }
  closed_tiles_.Clear();
  ponned_tiles_.Clear();
  kanned_tiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TileType closed_tiles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closed_tiles:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TileType_IsValid(value)) {
            add_closed_tiles(static_cast< ::TileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::TileType_IsValid,
                 this->mutable_closed_tiles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_closed_tiles;
        if (input->ExpectTag(18)) goto parse_ponned_tiles;
        break;
      }

      // repeated .Hand.Pon ponned_tiles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ponned_tiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ponned_tiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ponned_tiles;
        if (input->ExpectTag(26)) goto parse_Kanned_tiles;
        break;
      }

      // repeated .Hand.Kan Kanned_tiles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Kanned_tiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kanned_tiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Kanned_tiles;
        if (input->ExpectTag(32)) goto parse_is_tsumo;
        break;
      }

      // optional bool is_tsumo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_tsumo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tsumo_)));
          set_has_is_tsumo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_reached;
        break;
      }

      // optional bool is_reached = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_reached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reached_)));
          set_has_is_reached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agari_tile;
        break;
      }

      // optional .TileType agari_tile = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agari_tile:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TileType_IsValid(value)) {
            set_agari_tile(static_cast< ::TileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TileType closed_tiles = 1;
  for (int i = 0; i < this->closed_tiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->closed_tiles(i), output);
  }

  // repeated .Hand.Pon ponned_tiles = 2;
  for (int i = 0; i < this->ponned_tiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ponned_tiles(i), output);
  }

  // repeated .Hand.Kan Kanned_tiles = 3;
  for (int i = 0; i < this->kanned_tiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->kanned_tiles(i), output);
  }

  // optional bool is_tsumo = 4;
  if (has_is_tsumo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_tsumo(), output);
  }

  // optional bool is_reached = 5;
  if (has_is_reached()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_reached(), output);
  }

  // optional .TileType agari_tile = 6;
  if (has_agari_tile()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->agari_tile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TileType closed_tiles = 1;
  for (int i = 0; i < this->closed_tiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->closed_tiles(i), target);
  }

  // repeated .Hand.Pon ponned_tiles = 2;
  for (int i = 0; i < this->ponned_tiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ponned_tiles(i), target);
  }

  // repeated .Hand.Kan Kanned_tiles = 3;
  for (int i = 0; i < this->kanned_tiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->kanned_tiles(i), target);
  }

  // optional bool is_tsumo = 4;
  if (has_is_tsumo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_tsumo(), target);
  }

  // optional bool is_reached = 5;
  if (has_is_reached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_reached(), target);
  }

  // optional .TileType agari_tile = 6;
  if (has_agari_tile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->agari_tile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional bool is_tsumo = 4;
    if (has_is_tsumo()) {
      total_size += 1 + 1;
    }

    // optional bool is_reached = 5;
    if (has_is_reached()) {
      total_size += 1 + 1;
    }

    // optional .TileType agari_tile = 6;
    if (has_agari_tile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->agari_tile());
    }

  }
  // repeated .TileType closed_tiles = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->closed_tiles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->closed_tiles(i));
    }
    total_size += 1 * this->closed_tiles_size() + data_size;
  }

  // repeated .Hand.Pon ponned_tiles = 2;
  total_size += 1 * this->ponned_tiles_size();
  for (int i = 0; i < this->ponned_tiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ponned_tiles(i));
  }

  // repeated .Hand.Kan Kanned_tiles = 3;
  total_size += 1 * this->kanned_tiles_size();
  for (int i = 0; i < this->kanned_tiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kanned_tiles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hand::MergeFrom(const Hand& from) {
  GOOGLE_CHECK_NE(&from, this);
  closed_tiles_.MergeFrom(from.closed_tiles_);
  ponned_tiles_.MergeFrom(from.ponned_tiles_);
  kanned_tiles_.MergeFrom(from.kanned_tiles_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_is_tsumo()) {
      set_is_tsumo(from.is_tsumo());
    }
    if (from.has_is_reached()) {
      set_is_reached(from.is_reached());
    }
    if (from.has_agari_tile()) {
      set_agari_tile(from.agari_tile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hand::CopyFrom(const Hand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hand::IsInitialized() const {

  return true;
}

void Hand::Swap(Hand* other) {
  if (other != this) {
    closed_tiles_.Swap(&other->closed_tiles_);
    ponned_tiles_.Swap(&other->ponned_tiles_);
    kanned_tiles_.Swap(&other->kanned_tiles_);
    std::swap(is_tsumo_, other->is_tsumo_);
    std::swap(is_reached_, other->is_reached_);
    std::swap(agari_tile_, other->agari_tile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hand_descriptor_;
  metadata.reflection = Hand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player::kMyWindFieldNumber;
const int Player::kMyHandFieldNumber;
#endif  // !_MSC_VER

Player::Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player::InitAsDefaultInstance() {
  my_hand_ = const_cast< ::Hand*>(&::Hand::default_instance());
}

Player::Player(const Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player::SharedCtor() {
  _cached_size_ = 0;
  my_wind_ = 0;
  my_hand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player::~Player() {
  SharedDtor();
}

void Player::SharedDtor() {
  if (this != default_instance_) {
    delete my_hand_;
  }
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

Player* Player::default_instance_ = NULL;

Player* Player::New() const {
  return new Player;
}

void Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    my_wind_ = 0;
    if (has_my_hand()) {
      if (my_hand_ != NULL) my_hand_->::Hand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TileType my_wind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TileType_IsValid(value)) {
            set_my_wind(static_cast< ::TileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_my_hand;
        break;
      }

      // optional .Hand my_hand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_hand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_hand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TileType my_wind = 1;
  if (has_my_wind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->my_wind(), output);
  }

  // optional .Hand my_hand = 2;
  if (has_my_hand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->my_hand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TileType my_wind = 1;
  if (has_my_wind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->my_wind(), target);
  }

  // optional .Hand my_hand = 2;
  if (has_my_hand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->my_hand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TileType my_wind = 1;
    if (has_my_wind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->my_wind());
    }

    // optional .Hand my_hand = 2;
    if (has_my_hand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_hand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_wind()) {
      set_my_wind(from.my_wind());
    }
    if (from.has_my_hand()) {
      mutable_my_hand()->::Hand::MergeFrom(from.my_hand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {

  return true;
}

void Player::Swap(Player* other) {
  if (other != this) {
    std::swap(my_wind_, other->my_wind_);
    std::swap(my_hand_, other->my_hand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Field::kWindFieldNumber;
const int Field::kDorasFieldNumber;
const int Field::kHonbaFieldNumber;
#endif  // !_MSC_VER

Field::Field()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Field::InitAsDefaultInstance() {
}

Field::Field(const Field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Field::SharedCtor() {
  _cached_size_ = 0;
  wind_ = 0;
  honba_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field::~Field() {
  SharedDtor();
}

void Field::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New() const {
  return new Field;
}

void Field::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wind_ = 0;
    honba_ = 0;
  }
  doras_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TileType wind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TileType_IsValid(value)) {
            set_wind(static_cast< ::TileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_doras;
        break;
      }

      // repeated .TileType doras = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doras:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TileType_IsValid(value)) {
            add_doras(static_cast< ::TileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::TileType_IsValid,
                 this->mutable_doras())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_doras;
        if (input->ExpectTag(24)) goto parse_honba;
        break;
      }

      // optional int32 honba = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honba:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honba_)));
          set_has_honba();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TileType wind = 1;
  if (has_wind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->wind(), output);
  }

  // repeated .TileType doras = 2;
  for (int i = 0; i < this->doras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->doras(i), output);
  }

  // optional int32 honba = 3;
  if (has_honba()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->honba(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TileType wind = 1;
  if (has_wind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->wind(), target);
  }

  // repeated .TileType doras = 2;
  for (int i = 0; i < this->doras_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->doras(i), target);
  }

  // optional int32 honba = 3;
  if (has_honba()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->honba(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TileType wind = 1;
    if (has_wind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wind());
    }

    // optional int32 honba = 3;
    if (has_honba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honba());
    }

  }
  // repeated .TileType doras = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->doras_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->doras(i));
    }
    total_size += 1 * this->doras_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  doras_.MergeFrom(from.doras_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wind()) {
      set_wind(from.wind());
    }
    if (from.has_honba()) {
      set_honba(from.honba());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {

  return true;
}

void Field::Swap(Field* other) {
  if (other != this) {
    std::swap(wind_, other->wind_);
    doras_.Swap(&other->doras_);
    std::swap(honba_, other->honba_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreCalculationResponse::kFuFieldNumber;
const int ScoreCalculationResponse::kFanFieldNumber;
#endif  // !_MSC_VER

ScoreCalculationResponse::ScoreCalculationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreCalculationResponse::InitAsDefaultInstance() {
}

ScoreCalculationResponse::ScoreCalculationResponse(const ScoreCalculationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreCalculationResponse::SharedCtor() {
  _cached_size_ = 0;
  fu_ = 0;
  fan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreCalculationResponse::~ScoreCalculationResponse() {
  SharedDtor();
}

void ScoreCalculationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreCalculationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreCalculationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreCalculationResponse_descriptor_;
}

const ScoreCalculationResponse& ScoreCalculationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

ScoreCalculationResponse* ScoreCalculationResponse::default_instance_ = NULL;

ScoreCalculationResponse* ScoreCalculationResponse::New() const {
  return new ScoreCalculationResponse;
}

void ScoreCalculationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fu_ = 0;
    fan_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreCalculationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fu_)));
          set_has_fu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fan;
        break;
      }

      // optional int32 fan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fan_)));
          set_has_fan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreCalculationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fu = 1;
  if (has_fu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fu(), output);
  }

  // optional int32 fan = 2;
  if (has_fan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreCalculationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fu = 1;
  if (has_fu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fu(), target);
  }

  // optional int32 fan = 2;
  if (has_fan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreCalculationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fu = 1;
    if (has_fu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fu());
    }

    // optional int32 fan = 2;
    if (has_fan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreCalculationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreCalculationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreCalculationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreCalculationResponse::MergeFrom(const ScoreCalculationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fu()) {
      set_fu(from.fu());
    }
    if (from.has_fan()) {
      set_fan(from.fan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreCalculationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreCalculationResponse::CopyFrom(const ScoreCalculationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreCalculationResponse::IsInitialized() const {

  return true;
}

void ScoreCalculationResponse::Swap(ScoreCalculationResponse* other) {
  if (other != this) {
    std::swap(fu_, other->fu_);
    std::swap(fan_, other->fan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreCalculationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreCalculationResponse_descriptor_;
  metadata.reflection = ScoreCalculationResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
